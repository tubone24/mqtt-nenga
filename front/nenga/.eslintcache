[{"/Users/tubone/project/personal/mosquite/front/nenga/src/index.tsx":"1","/Users/tubone/project/personal/mosquite/front/nenga/src/serviceWorker.ts":"2","/Users/tubone/project/personal/mosquite/front/nenga/src/App.tsx":"3"},{"size":647,"mtime":1609331106562,"results":"4","hashOfConfig":"5"},{"size":5278,"mtime":1609253026411,"results":"6","hashOfConfig":"5"},{"size":5750,"mtime":1609331271804,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"kh20pb",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/tubone/project/personal/mosquite/front/nenga/src/index.tsx",[],["16","17"],"/Users/tubone/project/personal/mosquite/front/nenga/src/serviceWorker.ts",[],"/Users/tubone/project/personal/mosquite/front/nenga/src/App.tsx",["18"],"import * as React from 'react';\nimport axios from 'axios';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst url = \"http://localhost:8000\"\nconst initImage = \"https://i.imgur.com/mfYPqRr.png\"\n\nexport const App: React.FC = () => {\n    const initFile: File = new File([], \"\")\n    const [name, setName] = React.useState(\"\");\n    const [title, setTitle] = React.useState(\"\");\n    const [msg, setMsg] = React.useState(\"\");\n    const [selectedFile, setSelectedFile] = React.useState(initFile);\n    const [selectedFileName, setSelectedFileName] = React.useState(\"\")\n    const [previewImage, setPreviewImage] = React.useState(initImage);\n\n    const getBase64 = async(file: File): Promise<string | ArrayBuffer | null> => {\n        let b64str: string | ArrayBuffer | null = \"\";\n        let reader = new FileReader();\n        reader.readAsDataURL(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = (e) => {\n                console.log(e.target)\n                b64str = e.target !== null ? e.target.result : ''\n                resolve(b64str)\n            };\n            reader.onerror = (error) => {\n                console.log('Error: ', error);\n                return reject(error)\n            };\n        });\n    };\n\n    const handleSubmit = async(e: React.FormEvent) => {\n        e.preventDefault();\n        const image = await getBase64(selectedFile)\n        const data = { title, name, message: msg, image}\n        console.log(data)\n        try {\n            const result = await axios.post(url + '/send', data\n            );\n            console.log(result);\n        } catch (error) {\n            console.log('error!!');\n        }\n    };\n\n    const handlePreview = async(e: React.FormEvent) => {\n        e.preventDefault();\n        const image = await getBase64(selectedFile)\n        const data = { title, name, message: msg, image}\n        console.log(data)\n        try {\n            const result = await axios.post(url + '/preview', data\n            );\n            console.log(result);\n            setPreviewImage(result.data.image.image)\n        } catch (error) {\n            console.log('error!!');\n        }\n    };\n\n    return (\n        <div className=\"max-w-2xl bg-white py-10 px-5 m-auto w-full mt-10\">\n            <div className=\"grid grid-cols-1 gap-4 max-w-xl m-auto bg-indigo-500 shadow-2xl rounded-lg text-center py-12 mt-4\">\n                <span className=\"text-3xl leading-9 font-bold tracking-tight text-white sm:text-4xl sm:leading-10\">\n                    <FontAwesomeIcon icon={['fas', 'broadcast-tower']} />\n                    &nbsp;Send MQTT Nenga&nbsp;\n                    <FontAwesomeIcon icon={['fas', 'paper-plane']} />\n                </span>\n                <h3 className=\"text-base leading-9 font-bold tracking-tight text-white sm:text-base sm:leading-10\">\n                    Send New Year's cards via MQTT and display them on e-paper!\n                </h3>\n            </div>\n            <div className=\"grid grid-cols-1 gap-4 max-w-xl m-auto\">\n                <form>\n                    <div className=\"col-span-2 lg:col-span-1\">\n                        <input type=\"text\" className=\"border-solid border-gray-400 border-2 p-3 md:text-xl w-full\"\n                               placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)}/>\n                    </div>\n                    <div className=\"col-span-2 lg:col-span-1\">\n                        <input type=\"text\" className=\"border-solid border-gray-400 border-2 p-3 md:text-xl w-full\"\n                               placeholder=\"Title\" value={title} onChange={(e) => setTitle(e.target.value)}/>\n                    </div>\n                    <div className=\"col-span-2\">\n                        <input type=\"text\" className=\"border-solid border-gray-400 border-2 p-3 md:text-xl w-full\"\n                               placeholder=\"Message\" value={msg} onChange={(e) => setMsg(e.target.value)}/>\n                    </div>\n                    <div className=\"border border-solid border-gray-500 relative col-span-2\">\n                        <input type=\"file\" accept=\"image/jpeg\"\n                               className=\"cursor-pointer relative block opacity-0 w-full h-full p-20 z-50\"\n                               onChange={async(e) => {\n                                   setSelectedFile(e.target.files !== null ? e.target.files[0]: initFile)\n                                   setSelectedFileName(e.target.value)\n                               }}/>\n                        <div className=\"text-center p-10 absolute top-0 right-0 left-0 m-auto\">\n                            <h4>\n                                Drop JPEG image anywhere to upload\n                                <br/>or\n                            </h4>\n                            <p className=\"\">Select Files: {selectedFileName}</p>\n                        </div>\n                    </div>\n                    <div className=\"bg-light-blue-300 py-6\">\n                        <img className=\"object-scale-down h-48 w-full \" src={previewImage}  alt=\"preview image\"/>\n                    </div>\n                    <div className=\"col-span-2 text-right\">\n                        <button onClick={handlePreview} className=\"w-1/2 px-4 py-3 text-center bg-gray-100 text-gray-400 hover:bg-gray-200 hover:text-black font-bold rounded-lg text-sm\">Preview\n                        </button>\n                        <button onClick={handleSubmit} className=\"w-1/2 px-4 py-3 text-center text-pink-100 bg-pink-600 rounded-lg hover:bg-pink-700 hover:text-white font-bold text-sm\">Submit\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n\n};\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":107,"column":25,"nodeType":"25","endLine":107,"endColumn":114},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]